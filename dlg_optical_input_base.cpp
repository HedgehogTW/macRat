//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: dlg_optical_input_base.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "dlg_optical_input_base.h"


// Declare the bitmap loading function
extern void wxC3A76InitBitmapResources();

static bool bBitmapLoaded = false;


DlgOpticalInputBase::DlgOpticalInputBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC3A76InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer315 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer315);
    
    m_panel80 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    
    boxSizer315->Add(m_panel80, 0, wxALL, 5);
    
    wxGridBagSizer* gridBagSizer82 = new wxGridBagSizer(0, 0);
    m_panel80->SetSizer(gridBagSizer82);
    
    m_checkBoxLED = new wxCheckBox(m_panel80, wxID_ANY, _("LED"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxLED->SetValue(false);
    
    gridBagSizer82->Add(m_checkBoxLED, wxGBPosition(0,0), wxGBSpan(1,1), wxALL, 5);
    
    m_checkBoxRef = new wxCheckBox(m_panel80, wxID_ANY, _("Ref. Frame"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxRef->SetValue(false);
    
    gridBagSizer82->Add(m_checkBoxRef, wxGBPosition(0,1), wxGBSpan(1,1), wxALL, 5);
    
    m_checkBoxPinna = new wxCheckBox(m_panel80, wxID_ANY, _("Pinna detection"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxPinna->SetValue(false);
    
    gridBagSizer82->Add(m_checkBoxPinna, wxGBPosition(0,2), wxGBSpan(1,1), wxALL, 5);
    
    m_checkBoxVerLine = new wxCheckBox(m_panel80, wxID_ANY, _("Vertical Line (0-based)"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxVerLine->SetValue(false);
    
    gridBagSizer82->Add(m_checkBoxVerLine, wxGBPosition(1,0), wxGBSpan(1,2), wxALL, 5);
    
    m_textCtrlVerLine = new wxTextCtrl(m_panel80, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(50,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlVerLine->SetHint(wxT(""));
    #endif
    
    gridBagSizer82->Add(m_textCtrlVerLine, wxGBPosition(1,2), wxGBSpan(1,1), wxALL, 5);
    
    m_staticLine84 = new wxStaticLine(m_panel80, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxLI_HORIZONTAL);
    
    gridBagSizer82->Add(m_staticLine84, wxGBPosition(2,0), wxGBSpan(1,3), wxALL|wxEXPAND, 5);
    
    m_checkBoxEyeMove = new wxCheckBox(m_panel80, wxID_ANY, _("Eye movement"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxEyeMove->SetValue(false);
    
    gridBagSizer82->Add(m_checkBoxEyeMove, wxGBPosition(3,0), wxGBSpan(1,1), wxALL, 5);
    
    m_checkBoxGrayDiff = new wxCheckBox(m_panel80, wxID_ANY, _("Graylevel Difference"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxGrayDiff->SetValue(false);
    
    gridBagSizer82->Add(m_checkBoxGrayDiff, wxGBPosition(3,1), wxGBSpan(1,1), wxALL, 5);
    
    m_checkBoxAdjDiff = new wxCheckBox(m_panel80, wxID_ANY, _("ImageDiff"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxAdjDiff->SetValue(false);
    
    gridBagSizer82->Add(m_checkBoxAdjDiff, wxGBPosition(3,2), wxGBSpan(1,1), wxALL, 5);
    
    m_staticLine86 = new wxStaticLine(m_panel80, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxLI_HORIZONTAL);
    
    gridBagSizer82->Add(m_staticLine86, wxGBPosition(4,0), wxGBSpan(1,3), wxALL|wxEXPAND, 5);
    
    m_checkBoxOptical = new wxCheckBox(m_panel80, wxID_ANY, _("Opticalflow"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxOptical->SetValue(false);
    
    gridBagSizer82->Add(m_checkBoxOptical, wxGBPosition(5,0), wxGBSpan(1,1), wxALL, 5);
    
    m_checkBoxOpticalPDF = new wxCheckBox(m_panel80, wxID_ANY, _("Opticalflow with PDF"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxOpticalPDF->SetValue(false);
    
    gridBagSizer82->Add(m_checkBoxOpticalPDF, wxGBPosition(5,1), wxGBSpan(1,2), wxALL, 5);
    
    m_radioButtonInstan = new wxRadioButton(m_panel80, wxID_ANY, _("Instantaneous"), wxDefaultPosition, wxSize(-1,-1), wxRB_GROUP);
    m_radioButtonInstan->SetValue(1);
    
    gridBagSizer82->Add(m_radioButtonInstan, wxGBPosition(6,0), wxGBSpan(1,1), wxALL, 5);
    
    m_radioButtonAccumu = new wxRadioButton(m_panel80, wxID_ANY, _("Accumulation"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_radioButtonAccumu->SetValue(1);
    
    gridBagSizer82->Add(m_radioButtonAccumu, wxGBPosition(6,1), wxGBSpan(1,1), wxALL, 5);
    
    m_panel38 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_panel38->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    m_panel38->SetToolTip(_("set"));
    
    boxSizer315->Add(m_panel38, 0, wxLEFT|wxRIGHT|wxBOTTOM, 5);
    
    wxGridBagSizer* gridBagSizer40 = new wxGridBagSizer(0, 0);
    m_panel38->SetSizer(gridBagSizer40);
    
    m_staticText718 = new wxStaticText(m_panel38, wxID_ANY, _("Frame steps"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_staticText718->SetForegroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNTEXT));
    
    gridBagSizer40->Add(m_staticText718, wxGBPosition(0,0), wxGBSpan(1,1), wxALL, 5);
    
    m_textCtrlFrameSteps = new wxTextCtrl(m_panel38, wxID_ANY, wxT("0"), wxDefaultPosition, wxSize(50,-1), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlFrameSteps->SetHint(wxT(""));
    #endif
    
    gridBagSizer40->Add(m_textCtrlFrameSteps, wxGBPosition(0,1), wxGBSpan(1,1), wxALL, 5);
    
    m_staticText1320 = new wxStaticText(m_panel38, wxID_ANY, _("0: use single reference frame"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer40->Add(m_staticText1320, wxGBPosition(0,2), wxGBSpan(1,2), wxALL, 5);
    
    m_staticText1923 = new wxStaticText(m_panel38, wxID_ANY, _("Probability threshold"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer40->Add(m_staticText1923, wxGBPosition(1,0), wxGBSpan(1,1), wxALL, 5);
    
    m_textCtrlThreshold = new wxTextCtrl(m_panel38, wxID_ANY, wxT("0.005"), wxDefaultPosition, wxSize(50,-1), wxTE_RIGHT);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlThreshold->SetHint(wxT(""));
    #endif
    
    gridBagSizer40->Add(m_textCtrlThreshold, wxGBPosition(1,1), wxGBSpan(1,1), wxALL, 5);
    
    m_staticText132 = new wxStaticText(m_panel38, wxID_ANY, _("eye gain *"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer40->Add(m_staticText132, wxGBPosition(2,0), wxGBSpan(1,1), wxALL, 5);
    
    m_textCtrlEyeGain = new wxTextCtrl(m_panel38, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(50,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlEyeGain->SetHint(wxT(""));
    #endif
    
    gridBagSizer40->Add(m_textCtrlEyeGain, wxGBPosition(2,1), wxGBSpan(1,1), wxALL, 5);
    
    m_staticText136 = new wxStaticText(m_panel38, wxID_ANY, _("optical PDF gain /"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    gridBagSizer40->Add(m_staticText136, wxGBPosition(2,2), wxGBSpan(1,1), wxALL, 5);
    
    m_textCtrlPDFGain = new wxTextCtrl(m_panel38, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(50,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlPDFGain->SetHint(wxT(""));
    #endif
    
    gridBagSizer40->Add(m_textCtrlPDFGain, wxGBPosition(2,3), wxGBSpan(1,1), wxALL, 5);
    
    m_staticLine78 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxLI_HORIZONTAL);
    
    boxSizer315->Add(m_staticLine78, 0, wxALL|wxEXPAND, 5);
    
    m_panel96 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    
    boxSizer315->Add(m_panel96, 0, wxALL, 5);
    
    wxBoxSizer* boxSizer98 = new wxBoxSizer(wxHORIZONTAL);
    m_panel96->SetSizer(boxSizer98);
    
    m_staticText100 = new wxStaticText(m_panel96, wxID_ANY, _("Y range, min"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer98->Add(m_staticText100, 0, wxALL, 5);
    
    m_textCtrlYmin = new wxTextCtrl(m_panel96, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlYmin->SetHint(wxT(""));
    #endif
    
    boxSizer98->Add(m_textCtrlYmin, 0, wxALL, 5);
    
    m_staticText104 = new wxStaticText(m_panel96, wxID_ANY, _("max"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer98->Add(m_staticText104, 0, wxALL, 5);
    
    m_textCtrlYmax = new wxTextCtrl(m_panel96, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlYmax->SetHint(wxT(""));
    #endif
    
    boxSizer98->Add(m_textCtrlYmax, 0, wxALL, 5);
    
    m_panel116 = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    
    boxSizer315->Add(m_panel116, 0, wxLEFT|wxRIGHT|wxBOTTOM, 5);
    
    wxBoxSizer* boxSizer118 = new wxBoxSizer(wxHORIZONTAL);
    m_panel116->SetSizer(boxSizer118);
    
    m_staticText124 = new wxStaticText(m_panel116, wxID_ANY, _("ROI Size"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer118->Add(m_staticText124, 0, wxALL, 5);
    
    m_textCtrlROISize = new wxTextCtrl(m_panel116, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(50,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlROISize->SetHint(wxT(""));
    #endif
    
    boxSizer118->Add(m_textCtrlROISize, 0, wxALL, 5);
    
    m_staticText126 = new wxStaticText(m_panel116, wxID_ANY, _("Refer. Frame"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer118->Add(m_staticText126, 0, wxALL, 5);
    
    m_textCtrlReferFrame = new wxTextCtrl(m_panel116, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(50,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlReferFrame->SetHint(wxT(""));
    #endif
    
    boxSizer118->Add(m_textCtrlReferFrame, 0, wxALL, 5);
    
    m_staticText130 = new wxStaticText(m_panel116, wxID_ANY, _("0: automatic"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer118->Add(m_staticText130, 0, wxALL, 5);
    
    m_staticLine108 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxLI_HORIZONTAL);
    
    boxSizer315->Add(m_staticLine108, 0, wxALL|wxEXPAND, 5);
    
    m_stdBtnSizer52 = new wxStdDialogButtonSizer();
    
    boxSizer315->Add(m_stdBtnSizer52, 0, wxALL|wxALIGN_RIGHT, 5);
    
    m_button56 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_button56->SetDefault();
    m_stdBtnSizer52->AddButton(m_button56);
    
    m_button58 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer52->AddButton(m_button58);
    m_stdBtnSizer52->Realize();
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
}

DlgOpticalInputBase::~DlgOpticalInputBase()
{
}
