//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: dlg_process_next.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "dlg_process_next.h"


// Declare the bitmap loading function
extern void wxCraftermSQWhiInitBitmapResources();

static bool bBitmapLoaded = false;


DlgProcessNextBase::DlgProcessNextBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCraftermSQWhiInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer2 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer2);
    
    wxFlexGridSizer* flexGridSizer19 = new wxFlexGridSizer(0, 4, 0, 0);
    flexGridSizer19->SetFlexibleDirection( wxBOTH );
    flexGridSizer19->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    boxSizer2->Add(flexGridSizer19, 1, wxALL|wxEXPAND, 5);
    
    m_staticText8 = new wxStaticText(this, wxID_ANY, _("Amplitude range (lower, upper) sound"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer19->Add(m_staticText8, 0, wxALL, 5);
    
    m_textCtrlAmpLow = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlAmpLow->SetHint(wxT(""));
    #endif
    
    flexGridSizer19->Add(m_textCtrlAmpLow, 0, wxALL, 5);
    
    m_textCtrlAmpUp = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlAmpUp->SetHint(wxT(""));
    #endif
    
    flexGridSizer19->Add(m_textCtrlAmpUp, 0, wxALL, 5);
    
    m_textCtrlAmpSnd = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlAmpSnd->SetHint(wxT(""));
    #endif
    
    flexGridSizer19->Add(m_textCtrlAmpSnd, 0, wxALL, 5);
    
    m_staticText16 = new wxStaticText(this, wxID_ANY, _("Interval range (lower, upper) sound"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer19->Add(m_staticText16, 0, wxALL, 5);
    
    m_textCtrlIntervalLow = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlIntervalLow->SetHint(wxT(""));
    #endif
    
    flexGridSizer19->Add(m_textCtrlIntervalLow, 0, wxALL, 5);
    
    m_textCtrlIntervalUp = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlIntervalUp->SetHint(wxT(""));
    #endif
    
    flexGridSizer19->Add(m_textCtrlIntervalUp, 0, wxALL, 5);
    
    m_textCtrlIntervalSnd = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(60,-1), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlIntervalSnd->SetHint(wxT(""));
    #endif
    
    flexGridSizer19->Add(m_textCtrlIntervalSnd, 0, wxALL, 5);
    
    wxBoxSizer* boxSizer31 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer2->Add(boxSizer31, 1, wxALL|wxEXPAND|wxALIGN_RIGHT, 5);
    
    m_buttonReplot = new wxButton(this, wxID_ANY, _("Replot"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer31->Add(m_buttonReplot, 0, wxALL, 5);
    
    m_buttonNext = new wxButton(this, wxID_OK, _("Next"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer31->Add(m_buttonNext, 0, wxALL, 5);
    
    m_buttonBreak = new wxButton(this, wxID_CANCEL, _("Break"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer31->Add(m_buttonBreak, 0, wxALL, 5);
    
    SetName(wxT("DlgProcessNextBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonReplot->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DlgProcessNextBase::OnReplot), NULL, this);
    
}

DlgProcessNextBase::~DlgProcessNextBase()
{
    m_buttonReplot->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(DlgProcessNextBase::OnReplot), NULL, this);
    
}
